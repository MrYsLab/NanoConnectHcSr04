// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// hc_sr04 //
// ------- //

#define hc_sr04_wrap_target 0
#define hc_sr04_wrap 18

static const uint16_t hc_sr04_program_instructions[] = {
            //     .wrap_target
    0xe001, //  0: set    pins, 1                    
    0xe033, //  1: set    x, 19                      
    0xa0c1, //  2: mov    isr, x                     
    0x4066, //  3: in     null, 6                    
    0xa026, //  4: mov    x, isr                     
    0x0045, //  5: jmp    x--, 5                     
    0xe000, //  6: set    pins, 0                    
    0x20a0, //  7: wait   1 pin, 0                   
    0xa02b, //  8: mov    x, !null                   
    0x004b, //  9: jmp    x--, 11                    
    0x000c, // 10: jmp    12                         
    0x00c9, // 11: jmp    pin, 9                     
    0xa0c9, // 12: mov    isr, !x                    
    0x8000, // 13: push   noblock                    
    0xe03c, // 14: set    x, 28                      
    0xa0c1, // 15: mov    isr, x                     
    0x4072, // 16: in     null, 18                   
    0xa026, // 17: mov    x, isr                     
    0x0052, // 18: jmp    x--, 18                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program hc_sr04_program = {
    .instructions = hc_sr04_program_instructions,
    .length = 19,
    .origin = -1,
};

static inline pio_sm_config hc_sr04_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + hc_sr04_wrap_target, offset + hc_sr04_wrap);
    return c;
}

static inline void hc_sr04_init(PIO pio, uint sm, uint offset, uint trig_pin, uint echo_pin) {
   pio_gpio_init(pio, trig_pin);
   pio_gpio_init(pio, echo_pin);
// load the pio program into the pio memory
    //uint offset = pio_add_program(pio, &hc_sr04_program);
    // make an sm config
    pio_sm_config c = hc_sr04_program_get_default_config(offset);
    // set the 'in' pins, also used for 'wait'
    sm_config_set_in_pins(&c, echo_pin);
    // set the 'jmp' pin
    sm_config_set_jmp_pin(&c, echo_pin);
    // set the output pin to output
    pio_sm_set_consecutive_pindirs(pio, sm, trig_pin, 1, true);
    // set the 'set' pins
    sm_config_set_set_pins(&c, trig_pin, 1);
    // set shift direction
    sm_config_set_in_shift(&c, false, false, 0);
    // init the pio sm with the config
    pio_sm_init(pio, sm, offset, &c);
    // enable the sm
    pio_sm_set_enabled(pio, sm, true);
}

#endif

